#!/usr/bin/env python

# This file is autogenerated by Autocmake v0.5.0 http://autocmake.org
# Copyright (c) 2015-2016 by Radovan Bast, Jonas Juselius, and contributors.

import os
import sys

sys.path.insert(0, 'cmake')
sys.path.insert(0, 'cmake/lib')
sys.path.insert(0, 'cmake/lib/docopt')
import config
import docopt


options = """
Usage:
  ./setup [options] [<builddir>]
  ./setup (-h | --help)

Options:
  --static                               Enable static linking [default: False].
  --explicit-libs=<LIBS>                 Explicit linker specification for extra libraries passed directly to the linker [default: off].
  --type=<TYPE>                          Set the CMake build type (debug, release, or relwithdeb) [default: release].
  --generator=<STRING>                   Set the CMake build system generator [default: Unix Makefiles].
  --show                                 Show CMake command and exit.
  --cmake-executable=<CMAKE_EXECUTABLE>  Set the CMake executable [default: cmake].
  --cmake-options=<STRING>               Define options to CMake [default: ''].
  --prefix=<PATH>                        Set the install path for make install.
  <builddir>                             Build directory.
  -h --help                              Show this screen.
"""


def gen_cmake_command(options, arguments):
    """
    Generate CMake command based on options and arguments.
    """
    command = []
    command.append(arguments['--cmake-executable'])
    command.append('-DENABLE_STATIC_LINKING=%s' % arguments['--static'])
    command.append('-DEXPLICIT_LIBS=%s' % arguments['--explicit-libs'].strip())
    command.append('-DCMAKE_BUILD_TYPE={0}'.format(arguments['--type']))
    command.append('-G "{0}"'.format(arguments['--generator']))
    if arguments['--cmake-options'] != "''":
        command.append(arguments['--cmake-options'])
    if arguments['--prefix']:
        command.append('-DCMAKE_INSTALL_PREFIX="{0}"'.format(arguments['--prefix']))

    return ' '.join(command)


# parse command line args
try:
    arguments = docopt.docopt(options, argv=None)
except docopt.DocoptExit:
    sys.stderr.write('ERROR: bad input to {0}\n'.format(sys.argv[0]))
    sys.stderr.write(options)
    sys.exit(-1)


# use extensions to validate/post-process args
if config.module_exists('extensions'):
    import extensions
    arguments = extensions.postprocess_args(sys.argv, arguments)


root_directory = os.path.dirname(os.path.realpath(__file__))


build_path = arguments['<builddir>']


# create cmake command
cmake_command = '{0} {1}'.format(gen_cmake_command(options, arguments), root_directory)


# run cmake
config.configure(root_directory, build_path, cmake_command, arguments['--show'])
